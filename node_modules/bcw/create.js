#!/usr/bin/env node
let checkUpdate = require("./check-update");
let inquirer = require("inquirer");
let fs = require("fs");
let bcrypt = require("bcryptjs");
let { execSync } = require("child_process");
let path = require('path')

const templates = [
  "mvc-client",
  "mvc-client-observer",
  "node-server",
  "node-server-auth0",
  "other"
];
const CURR_DIR = process.cwd();

//prompts and the name of properties added to the answers object
const prompts = [
  {
    name: "project-choice",
    type: "list",
    message: "What project template would you like to generate?",
    choices: templates
  },
  {
    name: "project-name",
    type: "input",
    message: "Project name:",
    validate: function (input) {
      if (/^([A-Za-z\-\_\d])+$/.test(input)) return true;
      else
        return "Project name may only include letters, numbers, underscores and hashes.";
    }
  }
];
const otherPrompt = [
  {
    name: "templateName",
    type: "input",
    message: "Template:"
  }
];
const passwordPrompt = [
  {
    name: "password",
    type: "input",
    message: "Password:"
  }
];

const otherPasswords = {
  hackathon: "$2a$10$DB1SB58cJeqvz8HpZXbbsOv6dkMjxwhlw1FKhLTa98lEmCKx.7lly",
  kanban: "$2a$10$zPQq4h8vG3OX9hcmAnHnVeESszL2aPFk6CSD4ApQ6WPtlpUXxrgp2",
  consoleadventure: "$2a$10$/qudgH.F6Is4IoHyK0JRaeZ8duhhNzGLP921iknyL81zf5cxV8p5K",
  taskmaster: "$2a$10$t6FCuZcfQxGECYBarrOJxOLmk/HJSeFIdfFmOLs1sCLBwjeicSicS",
  inspire: "$2a$10$09djh8q7FGTtS7aa8S.mkeo9CCJ.n6Fn1ToZT/8dewZDyu4cFEKo6"
};

const otherEnvConfig = {
  auth: ["hackathon", "kanban", "node-server-auth0"],
  server: ["hackathon", "kanban", "recipebook", "node-server", "node-server-auth0"]
}
async function create() {
  inquirer.prompt(prompts).then(async answers => {
    let projectChoice = answers["project-choice"];
    let projectName = answers["project-name"];
    // @ts-ignore
    projectName = projectName.toLowerCase();
    let hasAuth = false;
    let isServer = false;
    try {
      projectChoice = await handleProjectChoice(projectChoice);
      // @ts-ignore
      hasAuth = otherEnvConfig.auth.includes(projectChoice.toLowerCase());
      // @ts-ignore
      isServer = otherEnvConfig.server.includes(projectChoice.toLowerCase());

      let projPath = `${CURR_DIR}/${projectName}`
      try {
        execSync("node " + `"${__dirname}/node_modules/create-project" ${projectName} codeworks-templates/${projectChoice}`);
      } catch (e) {
        console.error("[ERROR] Invalid Template");
        return;
      }
      console.log(`cd into ${projectName}`);

      if (isServer) {
        fs.writeFileSync(`${projPath}/.gitignore`, "node_modules \n.env", "utf8");
        let envContents = ["CONNECTION_STRING=", "PORT="];
        if (hasAuth) {
          envContents.push("AUTH_DOMAIN=", "AUTH_AUDIENCE=", "AUTH_CLIENT_ID=");
        }
        fs.writeFileSync(`${projPath}/.env`, envContents.join("\n"), "utf8");
        return console.log(`run npm i to install dependencies`);
      }
    } catch (e) {
      console.error("[UKNOWN ERROR]", e.toString())
    }
  });
}

async function handleProjectChoice(projectChoice) {
  if (projectChoice == "other") {
    let { templateName } = await inquirer.prompt(otherPrompt);
    let protectedTemplate = otherPasswords[templateName];

    if (protectedTemplate) {
      let { password } = await inquirer.prompt(passwordPrompt);
      let valid = await bcrypt.compare(password, protectedTemplate);
      if (!valid) {
        throw new Error("[UNAUTHORIZED] Invalid Password");
      }
    }
    projectChoice = templateName;
  }
  return projectChoice;
}


async function start() {
  try {
    await checkUpdate()
  } catch (e) {
    console.error(e)
  }
  try {
    await create()
  } catch (e) {
    console.error(e)
  }
}

start()